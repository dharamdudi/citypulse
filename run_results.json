{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-03-20T19:40:33.142866Z", "invocation_id": "2c1e8387-ff8f-40c1-a05f-21eef6b9e4c5", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.115587Z", "completed_at": "2025-03-20T19:40:30.132766Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.137273Z", "completed_at": "2025-03-20T19:40:30.137292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026549816131591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.business", "compiled": true, "compiled_code": "\n\nwith latest_data as (\n    select raw_data\n    from raw.yelp.raw_business\n    qualify max(ingestion_datetime) over () = ingestion_datetime\n)\n\nselect\n    raw_data:business_id::text as business_id,\n    raw_data:name::text as name,\n    raw_data:address::text as address,\n    raw_data:city::text as city,\n    raw_data:state::text as state,\n    raw_data:postal_code::text as postal_code,\n    raw_data:latitude::float as latitude,\n    raw_data:longitude::float as longitude,\n    raw_data:stars::float as stars,\n    raw_data:review_count::int as review_count,\n    raw_data:is_open::int::boolean as is_open,\n    raw_data:attributes::variant as attributes,\n    array_distinct(split(raw_data:categories::text, ', ')) as categories,\n    raw_data:hours::variant as hours\nfrom latest_data", "relation_name": "raw.yelp.view_business", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.120705Z", "completed_at": "2025-03-20T19:40:30.133305Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.138230Z", "completed_at": "2025-03-20T19:40:30.138239Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02657461166381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.checkins", "compiled": true, "compiled_code": "\n\nwith latest_data as (\n    select raw_data\n    from raw.yelp.raw_checkin\n    qualify max(ingestion_datetime) over () = ingestion_datetime\n)\n\nselect\n    raw_data:business_id::text as business_id,\n    array_distinct(split(raw_data:date::text, ', ')) as checkin_datetimes\nfrom latest_data", "relation_name": "raw.yelp.view_checkins", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.128366Z", "completed_at": "2025-03-20T19:40:30.139016Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.140863Z", "completed_at": "2025-03-20T19:40:30.140874Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02655959129333496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.reviews", "compiled": true, "compiled_code": "\n\nwith latest_data as (\n    select raw_data\n    from raw.yelp.raw_review\n    qualify max(ingestion_datetime) over () = ingestion_datetime\n)\n\nselect\n    raw_data:review_id::text as review_id,\n    raw_data:user_id::text as user_id,\n    raw_data:business_id::text as business_id,\n    raw_data:stars::int as stars,\n    try_to_date(raw_data:date::text) as review_date,\n    raw_data:text::text as review,\n    raw_data:useful::int as useful_votes,\n    raw_data:funny::int as funny_votes,\n    raw_data:cool::int as cool_votes\nfrom latest_data", "relation_name": "raw.yelp.view_reviews", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.133881Z", "completed_at": "2025-03-20T19:40:30.142422Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.144609Z", "completed_at": "2025-03-20T19:40:30.144619Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02968287467956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.tips", "compiled": true, "compiled_code": "\n\nwith latest_data as (\n    select raw_data\n    from raw.yelp.raw_tip\n    qualify max(ingestion_datetime) over () = ingestion_datetime\n)\n\nselect\n    raw_data:user_id::text as user_id,\n    raw_data:business_id::text as business_id,\n    try_to_timestamp(raw_data:date::text) as tip_date,\n    raw_data:text::text as tip_msg,\n    raw_data:compliment_count::int as compliment_count\nfrom latest_data", "relation_name": "raw.yelp.view_tips", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.146476Z", "completed_at": "2025-03-20T19:40:30.169804Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.180771Z", "completed_at": "2025-03-20T19:40:30.180784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03901219367980957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.users", "compiled": true, "compiled_code": "\n\nwith latest_data as (\n    select raw_data\n    from raw.yelp.raw_user\n    qualify max(ingestion_datetime) over () = ingestion_datetime\n)\n\nselect\n    raw_data:user_id::text as user_id,\n    raw_data:name::text as name,\n    raw_data:review_count::int as review_count,\n    raw_data:yelping_since::date as yelping_since,\n    array_distinct(split(raw_data:friends::text, ', ')) as friends,\n    raw_data:useful::int as useful_votes,\n    raw_data:funny::int as funny_votes,\n    raw_data:cool::int as cool_votes,\n    raw_data:fans::int as fans,\n    array_distinct(split(raw_data:elite::text, ',')) as elite_years,\n    raw_data:average_stars::float as average_stars,\n    raw_data:compliment_hot::int as compliment_hot,\n    raw_data:compliment_more::int as compliment_more,\n    raw_data:compliment_profile::int as compliment_profile,\n    raw_data:compliment_cute::int as compliment_cute,\n    raw_data:compliment_list::int as compliment_list,\n    raw_data:compliment_note::int as compliment_note,\n    raw_data:compliment_plain::int as compliment_plain,\n    raw_data:compliment_cool::int as compliment_cool,\n    raw_data:compliment_funny::int as compliment_funny,\n    raw_data:compliment_writer::int as compliment_writer,\n    raw_data:compliment_photos::int as compliment_photos\nfrom latest_data", "relation_name": "raw.yelp.view_users", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.150471Z", "completed_at": "2025-03-20T19:40:30.188958Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.189540Z", "completed_at": "2025-03-20T19:40:30.189550Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04669189453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.base_exposure_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.183167Z", "completed_at": "2025-03-20T19:40:30.197928Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.199458Z", "completed_at": "2025-03-20T19:40:30.199467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01738286018371582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.base_node_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.164133Z", "completed_at": "2025-03-20T19:40:30.200249Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.201610Z", "completed_at": "2025-03-20T19:40:30.201618Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05579662322998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as resource_id,\n    cast(null as TEXT) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.base_metric_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.191926Z", "completed_at": "2025-03-20T19:40:30.202501Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.204568Z", "completed_at": "2025-03-20T19:40:30.204578Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013752222061157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_source_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.base_source_columns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.170479Z", "completed_at": "2025-03-20T19:40:30.203508Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.205964Z", "completed_at": "2025-03-20T19:40:30.205974Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04255533218383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.base_node_columns", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as TEXT) as node_unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as data_type,\n    cast(null as TEXT) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as integer) as constraints_count,\n    cast(null as TEXT) as quote\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.base_node_columns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.207806Z", "completed_at": "2025-03-20T19:40:30.223705Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.228330Z", "completed_at": "2025-03-20T19:40:30.228342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025447368621826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposures", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT ) as unique_id,\n    cast(null as TEXT ) as name,\n    cast(null as TEXT ) as resource_type,\n    cast(null as TEXT ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT ) as exposure_type,\n    cast(null as TEXT ) as maturity,\n    cast(null as TEXT ) as package_name,\n    cast(null as TEXT ) as url,\n    cast(null as TEXT ) as owner_name,\n    cast(null as TEXT ) as owner_email,\n    cast(null as TEXT ) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.stg_exposures", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.229117Z", "completed_at": "2025-03-20T19:40:30.265319Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.271539Z", "completed_at": "2025-03-20T19:40:30.271551Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05513882637023926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_folders_table as (\n    \n        select 'base_folder_name' as var_name, 'base' as var_value\n        union all\n        select 'staging_folder_name' as var_name, 'staging' as var_value\n        union all\n        select 'intermediate_folder_name' as var_name, 'intermediate' as var_value\n        union all\n        select 'marts_folder_name' as var_name, 'marts' as var_value\n        \n)\n\nselect\n    var_name as folder_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_folder_name'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "relation_name": "production.public.stg_naming_convention_folders", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.217693Z", "completed_at": "2025-03-20T19:40:30.271003Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.278191Z", "completed_at": "2025-03-20T19:40:30.278199Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07154655456542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metrics", "compiled": true, "compiled_code": "\n\n\n    \n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as metric_type,\n    cast(null as TEXT) as label,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as metric_filter,\n    cast(null as TEXT) as metric_measure,\n    cast(null as TEXT) as metric_measure_alias,\n    cast(null as TEXT) as numerator,\n    cast(null as TEXT) as denominator,\n    cast(null as TEXT) as expr,\n    cast(null as TEXT) as metric_window,\n    cast(null as TEXT) as grain_to_date,\n    cast(null as TEXT) as meta\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.stg_metrics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.244711Z", "completed_at": "2025-03-20T19:40:30.277544Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.283686Z", "completed_at": "2025-03-20T19:40:30.283696Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0666654109954834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "compiled": true, "compiled_code": "\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nwith vars_prefix_table as (\n    \n            select 'base_prefixes' as var_name, 'base_' as var_value\n            union all\n            select 'staging_prefixes' as var_name, 'stg_' as var_value\n            union all\n            select 'intermediate_prefixes' as var_name, 'int_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'fct_' as var_value\n            union all\n            select 'marts_prefixes' as var_name, 'dim_' as var_value\n            union all\n            select 'other_prefixes' as var_name, 'rpt_' as var_value\n            \n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    \n\n    replace(\n        var_name,\n        \n  \n    '_prefixes'\n  \n,\n        ''\n    )\n\n\n as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        md5(cast(coalesce(cast(model_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(prefix_value as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "relation_name": "production.public.stg_naming_convention_prefixes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.265866Z", "completed_at": "2025-03-20T19:40:30.287000Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.289078Z", "completed_at": "2025-03-20T19:40:30.289086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025325775146484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_nodes", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as materialized,\n    cast(null as TEXT) as on_schema_change,\n    cast(null as TEXT) as model_group,\n    cast(null as TEXT) as access,\n    cast(null as TEXT) as latest_version,\n    cast(null as TEXT) as version,\n    cast(null as TEXT) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as integer) as total_defined_columns,\n    cast(0 as integer) as total_described_columns,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as TEXT) as column_name,\n    cast(null as TEXT) as meta,\n    cast(null as TEXT) as hard_coded_references,\n    cast(null as integer) as number_lines,\n    cast(null as float) as sql_complexity,\n    cast(null as TEXT) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.stg_nodes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.299360Z", "completed_at": "2025-03-20T19:40:30.301382Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.306856Z", "completed_at": "2025-03-20T19:40:30.306868Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020502567291259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.289820Z", "completed_at": "2025-03-20T19:40:30.308428Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.310235Z", "completed_at": "2025-03-20T19:40:30.310245Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025016069412231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_sources", "compiled": true, "compiled_code": "\n\n\n    \n\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as TEXT) as unique_id,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as file_path,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as resource_type,\n    cast(null as TEXT) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as TEXT) as loaded_at_field,\n    cast(True as boolean) as is_freshness_enabled,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT)  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "relation_name": "production.public.stg_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.324381Z", "completed_at": "2025-03-20T19:40:30.336746Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.341597Z", "completed_at": "2025-03-20T19:40:30.341605Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02405714988708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_business", "compiled": true, "compiled_code": "\n\nselect\n    business_id,\n    name,\n    address,\n    city,\n    state,\n    postal_code,\n    latitude,\n    longitude,\n    stars,\n    review_count,\n    is_open,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom raw.yelp.view_business\nqualify row_number() over (partition by business_id order by null desc) = 1\n\n", "relation_name": "production.public.dim_business", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.344246Z", "completed_at": "2025-03-20T19:40:30.356130Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.361056Z", "completed_at": "2025-03-20T19:40:30.361066Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02391195297241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_reviews", "compiled": true, "compiled_code": "\n\nselect\n    review_id,\n    user_id,\n    business_id,\n    stars,\n    review_date,\n    review,\n    useful_votes,\n    funny_votes,\n    cool_votes,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom raw.yelp.view_reviews", "relation_name": "production.public.dim_reviews", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.350353Z", "completed_at": "2025-03-20T19:40:30.366730Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.368465Z", "completed_at": "2025-03-20T19:40:30.368473Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02560257911682129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_tips", "compiled": true, "compiled_code": "\n\nselect\n    md5(cast(coalesce(cast(user_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(business_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tip_date as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key,\n    user_id,\n    business_id,\n    tip_date,\n    tip_msg,\n    compliment_count,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom raw.yelp.view_tips\nwhere tip_date is not null\nqualify row_number() over (partition by surrogate_key order by tip_date desc) = 1", "relation_name": "production.public.dim_tips", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.357746Z", "completed_at": "2025-03-20T19:40:30.367843Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.369799Z", "completed_at": "2025-03-20T19:40:30.369807Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02080702781677246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_users", "compiled": true, "compiled_code": "\n\nselect\n    user_id,\n    name,\n    review_count,\n    yelping_since,\n    useful_votes,\n    funny_votes,\n    cool_votes,\n    fans,\n    average_stars,\n    compliment_hot,\n    compliment_more,\n    compliment_profile,\n    compliment_cute,\n    compliment_list,\n    compliment_note,\n    compliment_plain,\n    compliment_cool,\n    compliment_funny,\n    compliment_writer,\n    compliment_photos,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom raw.yelp.view_users", "relation_name": "production.public.dim_users", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.385057Z", "completed_at": "2025-03-20T19:40:30.395049Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.396739Z", "completed_at": "2025-03-20T19:40:30.396747Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01969289779663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "compiled": true, "compiled_code": "with \n\n_base_node_relationships as (\n    select * from production.public.base_node_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "relation_name": "production.public.stg_node_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.381077Z", "completed_at": "2025-03-20T19:40:30.395670Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.398030Z", "completed_at": "2025-03-20T19:40:30.398038Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02169036865234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "compiled": true, "compiled_code": "with \n\n_base_exposure_relationships as (\n    select * from production.public.base_exposure_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "relation_name": "production.public.stg_exposure_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.388836Z", "completed_at": "2025-03-20T19:40:30.397490Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.419291Z", "completed_at": "2025-03-20T19:40:30.419303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.041718244552612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "compiled": true, "compiled_code": "with \n\n_base_metric_relationships as (\n    select * from production.public.base_metric_relationships\n),\n\nfinal as (\n    select \n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "relation_name": "production.public.stg_metric_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.598674Z", "completed_at": "2025-03-20T19:40:30.618111Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.619149Z", "completed_at": "2025-03-20T19:40:30.619159Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021543502807617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_business_operating_hours", "compiled": true, "compiled_code": "-- pivot\n\n\nwith\n __dbt__cte__business_opening_hrs as (\n\n\nwith flattened as (\n    select\n        business_id,\n        lower(h.key) as day_of_week,\n        split_part(h.value::text, '-', 1)::time as open_time\n    from raw.yelp.view_business,\n    lateral flatten(input => hours) as h\n)\n\nselect *\nfrom flattened\npivot(\n    max(open_time)\n    for day_of_week in ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')\n) as p (business_id, monday_open, tuesday_open, wednesday_open, thursday_open, friday_open, saturday_open, sunday_open)\n),  __dbt__cte__business_closing_hrs as (\n\n\nwith flattened as (\n    select\n        business_id,\n        lower(h.key) as day_of_week,\n        split_part(h.value::text, '-', 2)::time as close_time\n    from raw.yelp.view_business,\n    lateral flatten(input => hours) as h\n)\n\nselect *\nfrom flattened\npivot(\n    max(close_time)\n    for day_of_week in ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')\n) as p (business_id, monday_close, tuesday_close, wednesday_close, thursday_close, friday_close, saturday_close, sunday_close)\n), opening_hrs as (\n    select *\n    from __dbt__cte__business_opening_hrs\n),\n\nclosing_hrs as (\n    select *\n    from __dbt__cte__business_closing_hrs\n)\n\nselect\n    o.business_id,\n    o.monday_open,\n    c.monday_close,\n    o.tuesday_open,\n    c.tuesday_close,\n    o.wednesday_open,\n    c.wednesday_close,\n    o.thursday_open,\n    c.thursday_close,\n    o.friday_open,\n    c.friday_close,\n    o.saturday_open,\n    c.saturday_close,\n    o.sunday_open,\n    c.sunday_close\nfrom opening_hrs as o\ninner join closing_hrs as c\n    on o.business_id = c.business_id\n\n", "relation_name": "production.public.dim_business_operating_hours", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.610286Z", "completed_at": "2025-03-20T19:40:30.618627Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.619931Z", "completed_at": "2025-03-20T19:40:30.619941Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010755062103271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_business_categories", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__int_business_categories as (\n\n\nselect\n    business_id,\n    value::text as category\nfrom raw.yelp.view_business,\nlateral flatten(input => categories) as f\n) select\n    md5(cast(coalesce(cast(business_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key,\n    business_id,\n    category,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom __dbt__cte__int_business_categories", "relation_name": "production.public.dim_business_categories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.629737Z", "completed_at": "2025-03-20T19:40:30.648079Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.648614Z", "completed_at": "2025-03-20T19:40:30.648625Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02604985237121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_business_business_id.07cf75e8b8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    business_id as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_business\nwhere business_id is not null\ngroup by business_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.624615Z", "completed_at": "2025-03-20T19:40:30.658416Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.658940Z", "completed_at": "2025-03-20T19:40:30.658952Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03699064254760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_business_business_id.092a5ceb52", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect business_id\nfrom production.public.dim_business\nwhere business_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.661377Z", "completed_at": "2025-03-20T19:40:30.667010Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.667583Z", "completed_at": "2025-03-20T19:40:30.667592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007389545440673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_reviews_review_id.d18be33b60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect review_id\nfrom production.public.dim_reviews\nwhere review_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.650971Z", "completed_at": "2025-03-20T19:40:30.674775Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.675330Z", "completed_at": "2025-03-20T19:40:30.675337Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02544999122619629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_checkins", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__int_checkins as (\n\n\nselect\n    business_id,\n    value::timestamp as checkin_date\nfrom raw.yelp.view_checkins,\nlateral flatten(input => checkin_datetimes) as f\n) select\n    md5(cast(coalesce(cast(business_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(checkin_date as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key,\n    business_id,\n    checkin_date,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom __dbt__cte__int_checkins", "relation_name": "production.public.dim_checkins", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.669916Z", "completed_at": "2025-03-20T19:40:30.683980Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.684517Z", "completed_at": "2025-03-20T19:40:30.684526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015699386596679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_reviews_review_id.f348ba44af", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    review_id as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_reviews\nwhere review_id is not null\ngroup by review_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.679435Z", "completed_at": "2025-03-20T19:40:30.690923Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.691461Z", "completed_at": "2025-03-20T19:40:30.691469Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014950990676879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_tips_surrogate_key.7687430f12", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom production.public.dim_tips\nwhere surrogate_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.686775Z", "completed_at": "2025-03-20T19:40:30.701446Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.701954Z", "completed_at": "2025-03-20T19:40:30.701965Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01627635955810547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_tips_surrogate_key.987a539fa0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_tips\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.693977Z", "completed_at": "2025-03-20T19:40:30.708835Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.709382Z", "completed_at": "2025-03-20T19:40:30.709391Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016733884811401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_users_elite_years", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__int_users_elite_years as (\n\n\nwith flattened as (\n    select\n        user_id,\n        try_to_numeric(value::text) as elite_year\n    from raw.yelp.view_users,\n    lateral flatten(input => elite_years) as f\n)\n\nselect\n    user_id,\n    case when elite_year = 20 then 2020 else elite_year end as year\nfrom flattened\nwhere elite_year is not null\n) select\n    md5(cast(coalesce(cast(user_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(year as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key,\n    user_id,\n    year,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom __dbt__cte__int_users_elite_years", "relation_name": "production.public.dim_users_elite_years", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.704385Z", "completed_at": "2025-03-20T19:40:30.716478Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.716975Z", "completed_at": "2025-03-20T19:40:30.716999Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01381993293762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_users_user_id.e754bb5812", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom production.public.dim_users\nwhere user_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.711653Z", "completed_at": "2025-03-20T19:40:30.731927Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.732492Z", "completed_at": "2025-03-20T19:40:30.732500Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021919965744018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_users_user_id.bcdc17b9f9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_users\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.719200Z", "completed_at": "2025-03-20T19:40:30.764065Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.764703Z", "completed_at": "2025-03-20T19:40:30.764713Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04656839370727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_users_friends", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__int_users_friends as (\n\n\nselect\n    user_id,\n    value::text as friend_id\nfrom raw.yelp.view_users,\nlateral flatten(input => friends) as f\n) select\n    md5(cast(coalesce(cast(user_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(friend_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key,\n    user_id,\n    friend_id,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom __dbt__cte__int_users_friends", "relation_name": "production.public.dim_users_friends", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.768726Z", "completed_at": "2025-03-20T19:40:30.773425Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.773941Z", "completed_at": "2025-03-20T19:40:30.773949Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007939577102661133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_business_operating_hours_business_id.07fcb64b7b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect business_id\nfrom production.public.dim_business_operating_hours\nwhere business_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.734797Z", "completed_at": "2025-03-20T19:40:30.780312Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.780909Z", "completed_at": "2025-03-20T19:40:30.780917Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.047231435775756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.citypulse.dim_business_attributes", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__business_attributes_flattened as (\n\n\nselect\n    business_id,\n    lower(a.key) as attribute_key,\n    try_parse_json(a.value) as attribute_value\nfrom raw.yelp.view_business,\nlateral flatten(input => attributes) as a\n),  __dbt__cte__business_attributes_restaurent as (\n\n\nselect\n    business_id,\n    restaurantsdelivery::boolean as restaurantsdelivery,\n    drivethru::boolean as drivethru,\n    byobcorkage::text as byobcorkage,\n    byob::boolean as byob,\n    coatcheck::boolean as coatcheck,\n    happyhour::boolean as happyhour,\n    hastv::boolean as hastv,\n    restaurantspricerange2,\n    restaurantsreservations::boolean as restaurantsreservations,\n    restaurantstakeout::boolean as restaurantstakeout,\n    restaurantsgoodforgroups::boolean as restaurantsgoodforgroups,\n    alcohol::text as alcohol,\n    corkage::boolean as corkage,\n    caters::boolean as caters,\n    outdoorseating::boolean as outdoorseating,\n    restaurantsattire::text as restaurantsattire,\n    restaurantstableservice::boolean as restaurantstableservice,\n    restaurantscounterservice::boolean as restaurantscounterservice,\n    goodfordancing::boolean as goodfordancing\nfrom __dbt__cte__business_attributes_flattened\npivot(\n    max(attribute_value)\n    for attribute_key in (\n        'restaurantsdelivery', 'drivethru', 'byobcorkage', 'byob', 'coatcheck', 'happyhour', 'hastv',\n        'restaurantspricerange2', 'restaurantsreservations', 'restaurantstakeout', 'restaurantsgoodforgroups',\n        'alcohol', 'corkage', 'caters', 'outdoorseating', 'restaurantsattire',\n        'restaurantstableservice', 'restaurantscounterservice', 'goodfordancing'\n    )\n) as p (\n    business_id, restaurantsdelivery, drivethru, byobcorkage, byob, coatcheck, happyhour, hastv,\n    restaurantspricerange2, restaurantsreservations, restaurantstakeout, restaurantsgoodforgroups,\n    alcohol, corkage, caters, outdoorseating, restaurantsattire,\n    restaurantstableservice, restaurantscounterservice, goodfordancing\n)\n),  __dbt__cte__business_attributes_pets as (\n\n\nselect\n    business_id,\n    dogsallowed::boolean as dogsallowed\nfrom __dbt__cte__business_attributes_flattened\npivot(\n    max(attribute_value)\n    for attribute_key in ('dogsallowed')\n) as p (business_id, dogsallowed)\n),  __dbt__cte__business_attributes_ages as (\n\n\nselect\n    business_id,\n    agesallowed::text as agesallowed,\n    goodforkids::boolean as goodforkids\nfrom __dbt__cte__business_attributes_flattened\npivot(\n    max(attribute_value)\n    for attribute_key in ('agesallowed', 'goodforkids')\n) as p (business_id, agesallowed, goodforkids)\n),  __dbt__cte__business_attributes_ambience as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'ambience'\n),\n\nambience_flattened as (\n    select\n        business_id,\n        lower(a.key) as ambience_key,\n        a.value::boolean as ambience_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n)\n\nselect *\nfrom ambience_flattened\npivot(\n    max(ambience_value)\n    for ambience_key in ('romantic', 'intimate', 'classy', 'hipster', 'divey', 'touristy', 'trendy', 'upscale', 'casual')\n) as p (business_id, amb_romantic, amb_intimate, amb_classy, amb_hipster, amb_divey, amb_touristy, amb_trendy, amb_upscale, amb_casual)\n),  __dbt__cte__business_attributes_music as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'music'\n),\n\nmusic_flattened as (\n    select\n        business_id,\n        lower(a.key) as music_key,\n        a.value::boolean as music_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n)\n\nselect *\nfrom music_flattened\npivot(\n    max(music_value)\n    for music_key in ('dj', 'background_music', 'jukebox', 'live', 'video', 'karaoke')\n) as p (business_id, music_dj, music_background_music, music_jukebox, music_live, music_video, music_karaoke)\n),  __dbt__cte__business_attributes_parking as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'businessparking'\n),\n\nbp_flattened as (\n    select\n        business_id,\n        lower(a.key) as business_parking_key,\n        a.value::boolean as business_parking_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n),\n\nbusiness_parking as (\n    select *\n    from bp_flattened\n    pivot(\n        max(business_parking_value)\n        for business_parking_key in ('garage', 'street', 'validated', 'lot', 'valet')\n    ) as p (business_id, business_parking_garage, business_parking_street, business_parking_validated, business_parking_lot, business_parking_valet)\n),\n\nother_parking as (\n    select *\n    from __dbt__cte__business_attributes_flattened\n    pivot(\n        max(attribute_value)\n        for attribute_key in ('bikeparking', 'wheelchairaccessible')\n    ) as p (business_id, bike_parking, wheelchair_accessible)\n)\n\nselect\n    bp.business_id,\n    bp.business_parking_garage,\n    bp.business_parking_street,\n    bp.business_parking_validated,\n    bp.business_parking_lot,\n    bp.business_parking_valet,\n    try_parse_json(op.bike_parking)::boolean as bike_parking,\n    try_parse_json(op.wheelchair_accessible)::boolean as wheelchair_accessible\nfrom business_parking bp\ninner join other_parking op\n    on bp.business_id = op.business_id\n),  __dbt__cte__business_attributes_bestnights as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'bestnights'\n),\n\nbestnights_flattened as (\n    select\n        business_id,\n        lower(a.key) as bestnights_key,\n        a.value::boolean as bestnights_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n)\n\nselect *\nfrom bestnights_flattened\npivot(\n    max(bestnights_value)\n    for bestnights_key in ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')\n) as p (business_id, bestnights_monday, bestnights_tuesday, bestnights_wednesday, bestnights_thursday, bestnights_friday, bestnights_saturday, bestnights_sunday)\n),  __dbt__cte__business_attributes_common as (\n\n\nselect\n    business_id,\n    noiselevel::text as noiselevel,\n    byappointmentonly::boolean as byappointmentonly,\n    wifi::text as wifi,\n    smoking::text as smoking,\n    open24hours::boolean as open24hours\nfrom __dbt__cte__business_attributes_flattened\npivot(\n    max(attribute_value)\n    for attribute_key in ('noiselevel', 'byappointmentonly', 'wifi', 'smoking', 'open24hours')\n) as p (business_id, noiselevel, byappointmentonly, wifi, smoking, open24hours)\n),  __dbt__cte__business_attributes_goodformeal as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'goodformeal'\n),\n\ngoodformeal_flattened as (\n    select\n        business_id,\n        lower(a.key) as goodformeal_key,\n        a.value::boolean as goodformeal_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n)\n\nselect *\nfrom goodformeal_flattened\npivot(\n    max(goodformeal_value)\n    for goodformeal_key in ('dessert', 'latenight', 'lunch', 'dinner', 'brunch', 'breakfast')\n) as p (business_id, goodformeal_dessert, goodformeal_latenight, goodformeal_lunch, goodformeal_dinner, goodformeal_brunch, goodformeal_breakfast)\n),  __dbt__cte__business_attributes_payments as (\n\n\nselect\n    business_id,\n    acceptsinsurance::boolean as acceptsinsurance,\n    businessacceptscreditcards::boolean as businessacceptscreditcards,\n    businessacceptsbitcoin::boolean as businessacceptsbitcoin\nfrom __dbt__cte__business_attributes_flattened\npivot(\n    max(attribute_value)\n    for attribute_key in ('acceptsinsurance', 'businessacceptscreditcards', 'businessacceptsbitcoin')\n) as p (business_id, acceptsinsurance, businessacceptscreditcards, businessacceptsbitcoin)\n),  __dbt__cte__business_attributes_dietary_restrictions as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'dietaryrestrictions'\n),\n\ndiet_flattened as (\n    select\n        business_id,\n        lower(a.key) as diet_key,\n        a.value::boolean as diet_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n)\n\nselect\n    business_id,\n    diet_dairy_free::boolean as diet_dairy_free,\n    diet_gluten_free::boolean as diet_gluten_free,\n    diet_vegan::boolean as diet_vegan,\n    diet_kosher::boolean as diet_kosher,\n    diet_halal::boolean as diet_halal,\n    diet_soy_free::boolean as diet_soy_free,\n    diet_vegetarian::boolean as diet_vegetarian\nfrom diet_flattened\npivot(\n    max(diet_value)\n    for diet_key in ('dairy-free', 'gluten-free', 'vegan', 'kosher', 'halal', 'soy-free', 'vegetarian')\n) as p (business_id, diet_dairy_free, diet_gluten_free, diet_vegan, diet_kosher, diet_halal, diet_soy_free, diet_vegetarian)\n),  __dbt__cte__business_attributes_hairspecializesin as (\n\n\nwith flattened as (\n    select\n        business_id,\n        try_parse_json(attribute_value) as attribute_value\n    from __dbt__cte__business_attributes_flattened\n    where attribute_key = 'hairspecializesin'\n),\n\nhair_flattened as (\n    select\n        business_id,\n        lower(a.key) as hair_key,\n        a.value::boolean as hair_value\n    from flattened,\n    lateral flatten(input => attribute_value) as a\n)\n\nselect *\nfrom hair_flattened\npivot(\n    max(hair_value)\n    for hair_key in ('coloring', 'extensions', 'perms', 'straightperms', 'africanamerican', 'asian', 'curly', 'kids')\n) as p (business_id, hair_coloring, hair_extensions, hair_perms, hair_straightperms, hair_africanamerican, hair_asian, hair_curly, hair_kids)\n) select\n    rst.business_id,\n    rst.restaurantsdelivery,\n    rst.drivethru,\n    rst.byobcorkage,\n    rst.byob,\n    rst.coatcheck,\n    rst.happyhour,\n    rst.hastv,\n    rst.restaurantspricerange2,\n    rst.restaurantsreservations,\n    rst.restaurantstakeout,\n    rst.restaurantsgoodforgroups,\n    rst.alcohol,\n    rst.corkage,\n    rst.caters,\n    rst.outdoorseating,\n    rst.restaurantsattire,\n    rst.restaurantstableservice,\n    rst.restaurantscounterservice,\n    rst.goodfordancing,\n    pets.dogsallowed,\n    ages.agesallowed,\n    ages.goodforkids,\n    amb.amb_casual,\n    amb.amb_classy,\n    amb.amb_divey,\n    amb.amb_hipster,\n    amb.amb_intimate,\n    amb.amb_romantic,\n    amb.amb_touristy,\n    amb.amb_trendy,\n    amb.amb_upscale,\n    mus.music_background_music,\n    mus.music_dj,\n    mus.music_jukebox,\n    mus.music_karaoke,\n    mus.music_live,\n    mus.music_video,\n    park.business_parking_garage,\n    park.business_parking_street,\n    park.business_parking_validated,\n    park.business_parking_lot,\n    park.business_parking_valet,\n    park.bike_parking,\n    park.wheelchair_accessible,\n    bnt.bestnights_friday,\n    bnt.bestnights_monday,\n    bnt.bestnights_saturday,\n    bnt.bestnights_sunday,\n    bnt.bestnights_thursday,\n    bnt.bestnights_tuesday,\n    bnt.bestnights_wednesday,\n    cmn.noiselevel,\n    cmn.byappointmentonly,\n    cmn.wifi,\n    cmn.smoking,\n    cmn.open24hours,\n    gfm.goodformeal_dessert,\n    gfm.goodformeal_latenight,\n    gfm.goodformeal_lunch,\n    gfm.goodformeal_dinner,\n    gfm.goodformeal_brunch,\n    gfm.goodformeal_breakfast,\n    pmt.acceptsinsurance,\n    pmt.businessacceptscreditcards,\n    pmt.businessacceptsbitcoin,\n    dr.diet_dairy_free,\n    dr.diet_gluten_free,\n    dr.diet_vegan,\n    dr.diet_kosher,\n    dr.diet_halal,\n    dr.diet_soy_free,\n    dr.diet_vegetarian,\n    hr.hair_coloring,\n    hr.hair_extensions,\n    hr.hair_perms,\n    hr.hair_straightperms,\n    hr.hair_africanamerican,\n    hr.hair_asian,\n    hr.hair_curly,\n    hr.hair_kids,\n    '2025-03-20 19:40:28.389243+00:00'::timestamp_tz as executed_at\nfrom __dbt__cte__business_attributes_restaurent as rst\nleft join __dbt__cte__business_attributes_pets as pets\n    on rst.business_id = pets.business_id\nleft join __dbt__cte__business_attributes_ages as ages\n    on rst.business_id = ages.business_id\nleft join __dbt__cte__business_attributes_ambience as amb\n    on rst.business_id = amb.business_id\nleft join __dbt__cte__business_attributes_music as mus\n    on rst.business_id = mus.business_id\nleft join __dbt__cte__business_attributes_parking as park\n    on rst.business_id = park.business_id\nleft join __dbt__cte__business_attributes_bestnights as bnt\n    on rst.business_id = bnt.business_id\nleft join __dbt__cte__business_attributes_common as cmn\n    on rst.business_id = cmn.business_id\nleft join __dbt__cte__business_attributes_goodformeal as gfm\n    on rst.business_id = gfm.business_id\nleft join __dbt__cte__business_attributes_payments as pmt\n    on rst.business_id = pmt.business_id\nleft join __dbt__cte__business_attributes_dietary_restrictions as dr\n    on rst.business_id = dr.business_id\nleft join __dbt__cte__business_attributes_hairspecializesin as hr\n    on rst.business_id = hr.business_id", "relation_name": "production.public.dim_business_attributes", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.776288Z", "completed_at": "2025-03-20T19:40:30.788711Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.789334Z", "completed_at": "2025-03-20T19:40:30.789341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014172077178955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_business_operating_hours_business_id.e1fa70dd6b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    business_id as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_business_operating_hours\nwhere business_id is not null\ngroup by business_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.783363Z", "completed_at": "2025-03-20T19:40:30.795535Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.796214Z", "completed_at": "2025-03-20T19:40:30.796223Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013981103897094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_business_categories_surrogate_key.0e5277dc6c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom production.public.dim_business_categories\nwhere surrogate_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.791717Z", "completed_at": "2025-03-20T19:40:30.797560Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.798633Z", "completed_at": "2025-03-20T19:40:30.798643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008101463317871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_business_categories_surrogate_key.7cce2f1f3f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_business_categories\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.800469Z", "completed_at": "2025-03-20T19:40:30.805697Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.810134Z", "completed_at": "2025-03-20T19:40:30.810144Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012169599533081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_checkins_surrogate_key.686f55221f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom production.public.dim_checkins\nwhere surrogate_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.806212Z", "completed_at": "2025-03-20T19:40:30.816625Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.817261Z", "completed_at": "2025-03-20T19:40:30.817269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01286172866821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_checkins_surrogate_key.814a13d87f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_checkins\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.812629Z", "completed_at": "2025-03-20T19:40:30.823545Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.824164Z", "completed_at": "2025-03-20T19:40:30.824173Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012672901153564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_users_elite_years_surrogate_key.9cc60db477", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom production.public.dim_users_elite_years\nwhere surrogate_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.819653Z", "completed_at": "2025-03-20T19:40:30.830569Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.831197Z", "completed_at": "2025-03-20T19:40:30.831205Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012723684310913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_users_elite_years_surrogate_key.ea0216050c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_users_elite_years\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.826559Z", "completed_at": "2025-03-20T19:40:30.833561Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.839366Z", "completed_at": "2025-03-20T19:40:30.839377Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013952255249023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_users_friends_surrogate_key.514738d694", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom production.public.dim_users_friends\nwhere surrogate_key is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.834075Z", "completed_at": "2025-03-20T19:40:30.845974Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.846537Z", "completed_at": "2025-03-20T19:40:30.846547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014095067977905273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_users_friends_surrogate_key.5332a97a8c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_users_friends\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.841872Z", "completed_at": "2025-03-20T19:40:30.848393Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.849391Z", "completed_at": "2025-03-20T19:40:30.849401Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00867605209350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.not_null_dim_business_attributes_business_id.6a77c4999b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect business_id\nfrom production.public.dim_business_attributes\nwhere business_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.850173Z", "completed_at": "2025-03-20T19:40:30.854360Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:30.854845Z", "completed_at": "2025-03-20T19:40:30.854852Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00709223747253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.citypulse.unique_dim_business_attributes_business_id.6606cdc62c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    business_id as unique_field,\n    count(*) as n_records\n\nfrom production.public.dim_business_attributes\nwhere business_id is not null\ngroup by business_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.398795Z", "completed_at": "2025-03-20T19:40:31.793548Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:31.794096Z", "completed_at": "2025-03-20T19:40:31.794107Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.4002974033355713, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.stg_columns", "compiled": true, "compiled_code": "with\n\nfinal as (\n\n    \n\n        (\n            select\n                cast('production.public.base_node_columns' as TEXT) as _dbt_source_relation,\n\n                \n\n            from production.public.base_node_columns\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('production.public.base_source_columns' as TEXT) as _dbt_source_relation,\n\n                \n\n            from production.public.base_source_columns\n\n            \n        )\n\n        \n)\n\nselect * from final", "relation_name": "production.public.stg_columns", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:30.442586Z", "completed_at": "2025-03-20T19:40:31.944959Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:31.945518Z", "completed_at": "2025-03-20T19:40:31.945527Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5076088905334473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "compiled": true, "compiled_code": "-- one row for each resource in the graph\n\n\n\nwith unioned as (\n\n    \n\n        (\n            select\n                cast('production.public.stg_nodes' as TEXT) as _dbt_source_relation,\n\n                \n\n            from production.public.stg_nodes\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('production.public.stg_exposures' as TEXT) as _dbt_source_relation,\n\n                \n\n            from production.public.stg_exposures\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('production.public.stg_metrics' as TEXT) as _dbt_source_relation,\n\n                \n\n            from production.public.stg_metrics\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('production.public.stg_sources' as TEXT) as _dbt_source_relation,\n\n                \n\n            from production.public.stg_sources\n\n            \n        )\n\n        \n\n),\n\nnaming_convention_prefixes as (\n    select * from production.public.stg_naming_convention_prefixes\n), \n\nnaming_convention_folders as (\n    select * from production.public.stg_naming_convention_folders\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  source_name || '.' || name\n            when coalesce(version, '') != '' then name || '.v' || version \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else \n\n    split_part(\n        name,\n        '_',\n        1\n        )\n\n||'_' \n        end as prefix,\n        \n  \n\n    replace(\n        file_path,\n        regexp_replace(file_path,'.*/',''),\n        ''\n    )\n\n\n\n    \n  \n as directory_path,\n        regexp_replace(file_path,'.*/','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else nullif(naming_convention_prefixes.model_type, '')\n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        \n\n    position(\n        \n  \n    '/'\n  \n || naming_convention_folders.folder_name_value || \n  \n    '/'\n  \n in unioned_with_calc.directory_path\n    ) as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_not_null%' and unioned_with_calc.resource_type = 'test' as is_test_not_null,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt.test_unique%' and unioned_with_calc.resource_type = 'test' as is_test_unique,  \n        \n        unioned_with_calc.macro_dependencies like '%macro.dbt_utils.test_unique_combination_of_columns%' and unioned_with_calc.resource_type = 'test' as is_test_unique_combination_of_columns,  \n        \n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.is_freshness_enabled, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "relation_name": "production.public.int_all_graph_resources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:31.952546Z", "completed_at": "2025-03-20T19:40:31.976645Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:31.992447Z", "completed_at": "2025-03-20T19:40:31.992456Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.043082237243652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "compiled": true, "compiled_code": "with\n\nmodels as (\n    select * from production.public.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when is_described and model_type = 'base' then 1.0 else 0 end as is_described_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when is_described and model_type = 'staging' then 1.0 else 0 end as is_described_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when is_described and model_type = 'intermediate' then 1.0 else 0 end as is_described_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when is_described and model_type = 'marts' then 1.0 else 0 end as is_described_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when is_described and model_type = 'other' then 1.0 else 0 end as is_described_other_model\n        \n\n    from models\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(is_described_model) as integer) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_base_model) * 100 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_staging_model) * 100 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_intermediate_model) * 100 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_marts_model) * 100 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_documentation_coverage_pct,\n        \n            round(\n                \n    ( sum(is_described_other_model) * 100 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_documentation_coverage_pct\n        \n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "relation_name": "production.public.fct_documentation_coverage", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:31.966408Z", "completed_at": "2025-03-20T19:40:31.998647Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:31.999185Z", "completed_at": "2025-03-20T19:40:31.999192Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.047260284423828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "compiled": true, "compiled_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then schema || '.' || identifier \n            else database || '.' || schema || '.' || identifier \n        end as source_db_location \n    from production.public.int_all_graph_resources\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        \n    listagg(\n        resource_name,\n        ', '\n        )\n        within group (order by resource_name) as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_duplicate_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:31.971548Z", "completed_at": "2025-03-20T19:40:32.006036Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.006627Z", "completed_at": "2025-03-20T19:40:32.006635Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.049036264419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "compiled": true, "compiled_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from production.public.int_all_graph_resources\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_hard_coded_references", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:31.995219Z", "completed_at": "2025-03-20T19:40:32.014234Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.014745Z", "completed_at": "2025-03-20T19:40:32.014756Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020630836486816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_public_models_without_contract", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:31.977310Z", "completed_at": "2025-03-20T19:40:32.020720Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.021375Z", "completed_at": "2025-03-20T19:40:32.021384Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05726480484008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "compiled": true, "compiled_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from production.public.stg_naming_convention_prefixes\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        \n    listagg(\n        prefix_value,\n        ', '\n        )\n        within group (order by prefix_value) as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where nullif(models.prefix_value, '') is null\n\n)\n\nselect * from inappropriate_model_names\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_model_naming_conventions", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.009053Z", "completed_at": "2025-03-20T19:40:32.023232Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.024925Z", "completed_at": "2025-03-20T19:40:32.024932Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016981840133666992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_sources_without_freshness", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        resource_name\n\n    from all_resources\n    where not is_freshness_enabled and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_sources_without_freshness", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.001397Z", "completed_at": "2025-03-20T19:40:32.024395Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.029593Z", "completed_at": "2025-03-20T19:40:32.029601Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02926182746887207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_directories", "compiled": true, "compiled_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n\n\nwith all_graph_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models/' || 'staging' || '/' || source_name || '/' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_source_directories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.017003Z", "completed_at": "2025-03-20T19:40:32.025663Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.031082Z", "completed_at": "2025-03-20T19:40:32.031090Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015125751495361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_undocumented_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.026205Z", "completed_at": "2025-03-20T19:40:32.033730Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.035956Z", "completed_at": "2025-03-20T19:40:32.035963Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013443231582641602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "compiled": true, "compiled_code": "with \n\nall_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_undocumented_public_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.037235Z", "completed_at": "2025-03-20T19:40:32.057612Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.060323Z", "completed_at": "2025-03-20T19:40:32.060331Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027838945388793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_undocumented_source_tables", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.045479Z", "completed_at": "2025-03-20T19:40:32.058187Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.061132Z", "completed_at": "2025-03-20T19:40:32.061142Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025768756866455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "compiled": true, "compiled_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from production.public.int_all_graph_resources\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from production.public.stg_node_relationships\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from production.public.stg_exposure_relationships\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from production.public.stg_metric_relationships\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.resource_id,\n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.file_path,\n        all_graph_resources.directory_path, \n        all_graph_resources.file_name,\n        all_graph_resources.model_type,\n        all_graph_resources.materialized,\n        all_graph_resources.is_public, \n        all_graph_resources.access, \n        all_graph_resources.source_name,\n        all_graph_resources.is_excluded,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        md5(cast(coalesce(cast(resource_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(direct_parent_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "relation_name": "production.public.int_direct_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.041927Z", "completed_at": "2025-03-20T19:40:32.058680Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.061907Z", "completed_at": "2025-03-20T19:40:32.061915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027677536010742188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "compiled": true, "compiled_code": "with\n\nall_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_undocumented_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.051918Z", "completed_at": "2025-03-20T19:40:32.064197Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.066562Z", "completed_at": "2025-03-20T19:40:32.066570Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016172409057617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_duplicate_sources\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.074114Z", "completed_at": "2025-03-20T19:40:32.089459Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.094874Z", "completed_at": "2025-03-20T19:40:32.094885Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02904224395751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from production.public.fct_documentation_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not documentation_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.070037Z", "completed_at": "2025-03-20T19:40:32.094298Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.096395Z", "completed_at": "2025-03-20T19:40:32.096404Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031141281127929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_hard_coded_references\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.084430Z", "completed_at": "2025-03-20T19:40:32.095776Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.097796Z", "completed_at": "2025-03-20T19:40:32.097804Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030543804168701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_public_models_without_contract\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.090104Z", "completed_at": "2025-03-20T19:40:32.098535Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.100773Z", "completed_at": "2025-03-20T19:40:32.100781Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017119884490966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_model_naming_conventions\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.104295Z", "completed_at": "2025-03-20T19:40:32.119885Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.198482Z", "completed_at": "2025-03-20T19:40:32.198497Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09898757934570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_sources_without_freshness_.7793415283", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_sources_without_freshness\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.109543Z", "completed_at": "2025-03-20T19:40:32.204341Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.206106Z", "completed_at": "2025-03-20T19:40:32.206116Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10459494590759277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_source_directories\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.113626Z", "completed_at": "2025-03-20T19:40:32.205534Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.211499Z", "completed_at": "2025-03-20T19:40:32.211509Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10895800590515137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_undocumented_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.120604Z", "completed_at": "2025-03-20T19:40:32.206888Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.213045Z", "completed_at": "2025-03-20T19:40:32.213053Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10425853729248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_undocumented_public_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.207432Z", "completed_at": "2025-03-20T19:40:32.215169Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.217330Z", "completed_at": "2025-03-20T19:40:32.217338Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013815164566040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_undocumented_source_tables\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.219135Z", "completed_at": "2025-03-20T19:40:32.245296Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.249423Z", "completed_at": "2025-03-20T19:40:32.249431Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03491091728210449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_directories", "compiled": true, "compiled_code": "with\n\nresources as (\n\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from production.public.int_direct_relationships\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_test_directories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.240224Z", "completed_at": "2025-03-20T19:40:32.254780Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.255342Z", "completed_at": "2025-03-20T19:40:32.255349Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03733062744140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "compiled": true, "compiled_code": "with \n\nall_graph_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n),\n\nrelationships as (\n    select * from production.public.int_direct_relationships\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,count(distinct case when \n                all_graph_resources.is_test_unique or  \n                all_graph_resources.is_test_not_null\n            then relationships.resource_id else null end\n        ) as primary_key_method_1_count,count(distinct case when \n                all_graph_resources.is_test_unique_combination_of_columns\n            then relationships.resource_id else null end\n        ) as primary_key_method_2_count,\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from production.public.base_node_columns\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        cast(sum(case \n                when (\n                    primary_key_method_1_count >= 2\n                        or\n                    primary_key_method_2_count >= 1\n                        or\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as boolean) as is_primary_key_tested,\n        cast(sum(tests_count) as integer) as number_of_tests_on_model,\n        cast(sum(constraints_count) as integer) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        cast(coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as boolean) as is_primary_key_tested,\n        cast(coalesce(agg_test_relationships.number_of_tests_on_model, 0) as integer) as number_of_tests_on_model,\n        cast(coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as integer) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "relation_name": "production.public.int_model_test_summary", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.224158Z", "completed_at": "2025-03-20T19:40:32.256198Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.256681Z", "completed_at": "2025-03-20T19:40:32.256687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04052901268005371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "compiled": true, "compiled_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n\n\nwith recursive direct_relationships as (\n    select\n        *\n    from production.public.int_direct_relationships\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        array_construct( resource_name ) as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null \n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        array_append(all_relationships.path, direct_relationships.resource_name) as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    \n\n)\n\n\n\nselect * from all_relationships\norder by parent, distance", "relation_name": "production.public.int_all_dag_relationships", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.250456Z", "completed_at": "2025-03-20T19:40:32.264435Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.266430Z", "completed_at": "2025-03-20T19:40:32.266438Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03713107109069824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_undocumented_sources\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.259348Z", "completed_at": "2025-03-20T19:40:32.269475Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.271621Z", "completed_at": "2025-03-20T19:40:32.271628Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01332855224609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > 5\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n\n\norder by distance desc", "relation_name": "production.public.fct_chained_views_dependencies", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.272407Z", "completed_at": "2025-03-20T19:40:32.285317Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.286439Z", "completed_at": "2025-03-20T19:40:32.286447Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018746376037597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "compiled": true, "compiled_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_direct_join_to_source", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.276545Z", "completed_at": "2025-03-20T19:40:32.287196Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.292375Z", "completed_at": "2025-03-20T19:40:32.292383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02349686622619629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from production.public.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_exposure_parents_materializations", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.280708Z", "completed_at": "2025-03-20T19:40:32.291215Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.293381Z", "completed_at": "2025-03-20T19:40:32.293389Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022916555404663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "compiled": true, "compiled_code": "with \n\ndirect_exposure_relationships as (\n    select * from production.public.int_all_dag_relationships\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_exposures_dependent_on_private_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.287734Z", "completed_at": "2025-03-20T19:40:32.295289Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.297569Z", "completed_at": "2025-03-20T19:40:32.297579Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013123273849487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "compiled": true, "compiled_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_marts_or_intermediate_dependent_on_source", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.298868Z", "completed_at": "2025-03-20T19:40:32.316326Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.317692Z", "completed_at": "2025-03-20T19:40:32.317703Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023599624633789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "compiled": true, "compiled_code": "with\n\ntests as (\n    select * from production.public.int_model_test_summary\n    where resource_type in\n    (\n        'model'\n        \n    )\n),\n\nfinal as (\n\n    select\n        resource_name,\n        resource_type,\n        model_type,\n        is_primary_key_tested,\n        number_of_tests_on_model,\n        number_of_constraints_on_model\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_missing_primary_key_tests", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.305118Z", "completed_at": "2025-03-20T19:40:32.324003Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.325577Z", "completed_at": "2025-03-20T19:40:32.325585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028639793395996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_directories", "compiled": true, "compiled_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n\n \nwith all_graph_resources as (\n    select * from production.public.int_all_graph_resources\n    where not is_excluded\n),\n\nfolders as (\n    select * from production.public.stg_naming_convention_folders\n), \n\nall_dag_relationships as (\n    select * from production.public.int_all_dag_relationships\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models/' || 'staging' || '/' || parent_source_name || '/' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '/.../' || folders.folder_name_value || '/.../' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_model_directories", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.310998Z", "completed_at": "2025-03-20T19:40:32.326412Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.328601Z", "completed_at": "2025-03-20T19:40:32.328610Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030338048934936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= 3\n)\n\nselect * from model_fanout_agg\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_model_fanout", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.319606Z", "completed_at": "2025-03-20T19:40:32.327553Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.330018Z", "completed_at": "2025-03-20T19:40:32.330026Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0197603702545166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "compiled": true, "compiled_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from production.public.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        \n    listagg(\n        parent,\n        ', '\n        )\n        within group (order by parent) as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_multiple_sources_joined", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.331922Z", "completed_at": "2025-03-20T19:40:32.341860Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.347513Z", "completed_at": "2025-03-20T19:40:32.347525Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020673036575317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "compiled": true, "compiled_code": "with all_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_rejoining_of_upstream_concepts", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.337919Z", "completed_at": "2025-03-20T19:40:32.348335Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.353014Z", "completed_at": "2025-03-20T19:40:32.353023Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02233266830444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_root_models", "compiled": true, "compiled_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_root_models", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.343005Z", "completed_at": "2025-03-20T19:40:32.355186Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.357405Z", "completed_at": "2025-03-20T19:40:32.357413Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020797014236450195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "compiled": true, "compiled_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        \n    listagg(\n        child,\n        ', '\n        )\n        within group (order by child) as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_source_fanout", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.348848Z", "completed_at": "2025-03-20T19:40:32.356285Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.363089Z", "completed_at": "2025-03-20T19:40:32.363099Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025838136672973633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "compiled": true, "compiled_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_staging_dependent_on_marts_or_intermediate", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.358178Z", "completed_at": "2025-03-20T19:40:32.374720Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.376943Z", "completed_at": "2025-03-20T19:40:32.376952Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.023061752319335938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "compiled": true, "compiled_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_staging_dependent_on_staging", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.365800Z", "completed_at": "2025-03-20T19:40:32.376445Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.385166Z", "completed_at": "2025-03-20T19:40:32.385176Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028467416763305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "compiled": true, "compiled_code": "with\n\ntest_counts as (\n    select * from production.public.int_model_test_summary\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        cast(case when number_of_tests_on_model > 0 then 1 else 0 end as boolean) as is_tested_model,\n        \n            case when model_type = 'base' then 1.0 else NULL end as is_base_model,\n            case when number_of_tests_on_model > 0 and model_type = 'base' then 1.0 else 0 end as is_tested_base_model,\n        \n            case when model_type = 'staging' then 1.0 else NULL end as is_staging_model,\n            case when number_of_tests_on_model > 0 and model_type = 'staging' then 1.0 else 0 end as is_tested_staging_model,\n        \n            case when model_type = 'intermediate' then 1.0 else NULL end as is_intermediate_model,\n            case when number_of_tests_on_model > 0 and model_type = 'intermediate' then 1.0 else 0 end as is_tested_intermediate_model,\n        \n            case when model_type = 'marts' then 1.0 else NULL end as is_marts_model,\n            case when number_of_tests_on_model > 0 and model_type = 'marts' then 1.0 else 0 end as is_tested_marts_model,\n        \n            case when model_type = 'other' then 1.0 else NULL end as is_other_model,\n            case when number_of_tests_on_model > 0 and model_type = 'other' then 1.0 else 0 end as is_tested_other_model\n        \n\n    from test_counts\n),\n\nfinal as (\n    select\n        convert_timezone('UTC', current_timestamp()) as measured_at,\n        cast(count(*) as integer) as total_models,\n        cast(sum(number_of_tests_on_model) as integer) as total_tests,\n        sum(cast(is_tested_model as integer)) as tested_models,\n        round(sum(cast(is_tested_model as integer)) * 100.0 / count(*), 2) as test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_base_model) * 100.0 ) / nullif( ( count(is_base_model) ), 0)\n\n            , 2) as base_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_staging_model) * 100.0 ) / nullif( ( count(is_staging_model) ), 0)\n\n            , 2) as staging_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_intermediate_model) * 100.0 ) / nullif( ( count(is_intermediate_model) ), 0)\n\n            , 2) as intermediate_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_marts_model) * 100.0 ) / nullif( ( count(is_marts_model) ), 0)\n\n            , 2) as marts_test_coverage_pct,\n        \n            round(\n                \n    ( sum(is_tested_other_model) * 100.0 ) / nullif( ( count(is_other_model) ), 0)\n\n            , 2) as other_test_coverage_pct,\n        \n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "relation_name": "production.public.fct_test_coverage", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.377732Z", "completed_at": "2025-03-20T19:40:32.387105Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.389429Z", "completed_at": "2025-03-20T19:40:32.389436Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016144275665283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "compiled": true, "compiled_code": "with all_dag_relationships as (\n    select\n        *\n    from production.public.int_all_dag_relationships\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        cast(count(distinct parent) as integer) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= 7\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_too_many_joins", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.381716Z", "completed_at": "2025-03-20T19:40:32.388878Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.391278Z", "completed_at": "2025-03-20T19:40:32.391286Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01717519760131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "compiled": true, "compiled_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from production.public.int_all_dag_relationships\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n\n\n    \n\n    \n    \n\n    \n\n    \n\n", "relation_name": "production.public.fct_unused_sources", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.398436Z", "completed_at": "2025-03-20T19:40:32.408840Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.415308Z", "completed_at": "2025-03-20T19:40:32.415318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02520298957824707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_chained_views_dependencies\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.393160Z", "completed_at": "2025-03-20T19:40:32.409532Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.416705Z", "completed_at": "2025-03-20T19:40:32.416714Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02851247787475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_test_directories\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.404737Z", "completed_at": "2025-03-20T19:40:32.417516Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.419863Z", "completed_at": "2025-03-20T19:40:32.419871Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02211284637451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_direct_join_to_source\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.410043Z", "completed_at": "2025-03-20T19:40:32.419342Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.421728Z", "completed_at": "2025-03-20T19:40:32.421738Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019026994705200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_exposure_parents_materializations\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.425945Z", "completed_at": "2025-03-20T19:40:32.436234Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.445334Z", "completed_at": "2025-03-20T19:40:32.445346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024794816970825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_exposures_dependent_on_private_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.430043Z", "completed_at": "2025-03-20T19:40:32.436726Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.446271Z", "completed_at": "2025-03-20T19:40:32.446279Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025145292282104492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_marts_or_intermediate_dependent_on_source\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.437237Z", "completed_at": "2025-03-20T19:40:32.449128Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.451192Z", "completed_at": "2025-03-20T19:40:32.451200Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025861263275146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_missing_primary_key_tests\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.441283Z", "completed_at": "2025-03-20T19:40:32.449597Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.451945Z", "completed_at": "2025-03-20T19:40:32.451954Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017925262451171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_model_directories\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.453272Z", "completed_at": "2025-03-20T19:40:32.464139Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.466217Z", "completed_at": "2025-03-20T19:40:32.466228Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01774764060974121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_model_fanout\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.458522Z", "completed_at": "2025-03-20T19:40:32.465159Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.472214Z", "completed_at": "2025-03-20T19:40:32.472227Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.02218914031982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_multiple_sources_joined\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.473848Z", "completed_at": "2025-03-20T19:40:32.480636Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.482693Z", "completed_at": "2025-03-20T19:40:32.482701Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0193631649017334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_root_models\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.467010Z", "completed_at": "2025-03-20T19:40:32.481656Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.487615Z", "completed_at": "2025-03-20T19:40:32.487623Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024933815002441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_rejoining_of_upstream_concepts\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.488414Z", "completed_at": "2025-03-20T19:40:32.494611Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.496693Z", "completed_at": "2025-03-20T19:40:32.496700Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016770362854003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_staging_dependent_on_marts_or_intermediate\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.483490Z", "completed_at": "2025-03-20T19:40:32.495662Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.498011Z", "completed_at": "2025-03-20T19:40:32.498019Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01869368553161621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_source_fanout\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.498762Z", "completed_at": "2025-03-20T19:40:32.510336Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.512840Z", "completed_at": "2025-03-20T19:40:32.512851Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018998146057128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_staging_dependent_on_staging\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.503534Z", "completed_at": "2025-03-20T19:40:32.512301Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.518328Z", "completed_at": "2025-03-20T19:40:32.518339Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023289918899536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from production.public.fct_test_coverage\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not test_coverage_pct >= 100\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.514246Z", "completed_at": "2025-03-20T19:40:32.525551Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.526126Z", "completed_at": "2025-03-20T19:40:32.526136Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016585350036621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_too_many_joins\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-20T19:40:32.519246Z", "completed_at": "2025-03-20T19:40:32.526905Z"}, {"name": "execute", "started_at": "2025-03-20T19:40:32.527501Z", "completed_at": "2025-03-20T19:40:32.527508Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01648426055908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "compiled": true, "compiled_code": "\n\n    \n\n    select count(*) as n_records\n    from production.public.fct_unused_sources\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 3.9265949726104736, "args": {"strict_mode": false, "populate_cache": true, "defer": false, "require_batched_execution_for_custom_microbatch_strategy": false, "log_level": "info", "show_resource_report": false, "version_check": true, "target": "prod", "send_anonymous_usage_stats": true, "vars": {}, "select": [], "exclude": [], "log_format_file": "debug", "skip_nodes_if_on_run_start_fails": false, "require_resource_names_without_spaces": false, "static_parser": true, "empty_catalog": false, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "log_format": "default", "source_freshness_run_project_hooks": false, "printer_width": 80, "macro_debugging": false, "require_nested_cumulative_type_params": false, "partial_parse_file_diff": true, "cache_selected_only": false, "state_modified_compare_more_unrendered_values": false, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "log_file_max_bytes": 10485760, "static": false, "log_level_file": "debug", "which": "generate", "log_path": "/home/runner/work/citypulse/citypulse/dbt/logs", "use_colors_file": true, "invocation_command": "dbt docs generate", "indirect_selection": "eager", "favor_state": false, "print": true, "partial_parse": true, "profiles_dir": "profiles/", "quiet": false, "project_dir": "/home/runner/work/citypulse/citypulse/dbt", "compile": true, "state_modified_compare_vars": false, "introspect": true, "require_yaml_configuration_for_mf_time_spines": false}}